# Derived from https://github.com/obi1kenobi/cargo-semver-checks/blob/main/.github/workflows/ci.yml

name: CI

on:
  pull_request:
  push:
    branches:
      - main
  schedule:
    - cron: "0 7 * * *" # run once per day at 7:00 am

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always
  PACKAGE_NAME: entromatica

jobs:
  ci-everything:
    name: All CI stages
    runs-on: ubuntu-latest
    needs:
      - lint
      - rust-tests
    steps:
      - run: exit 0

  lint:
    name: Check lint and rustfmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          profile: minimal
          override: true

      - uses: Swatinem/rust-cache@v2

      - name: cargo clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --workspace --all-features --all-targets -- -D warnings --allow deprecated

      - name: cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: -- --check

  rust-tests:
    name: Run tests
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      matrix:
        toolchain: ["stable", "beta"]
        experimental: [false]
        include:
          - toolchain: "nightly"
            experimental: true
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          profile: minimal

      - uses: Swatinem/rust-cache@v2

      - name: test
        run: cargo test

  init-release:
    name: Run the release workflow
    needs:
      - should-publish
      - ci-everything
      - pre-publish-checks
    if: needs.should-publish.outputs.is_new_version == 'yes' && github.ref == 'refs/heads/main'
    uses: ./.github/workflows/release.yml
    with:
      publish-tag: ${{ needs.should-publish.outputs.publish-tag }}
    secrets:
      CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  should-publish:
    name: Check if version changed
    runs-on: ubuntu-latest
    outputs:
      is_new_version: ${{ steps.check.outputs.is_new_version }}
      publish-tag: ${{ steps.tag.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - uses: Swatinem/rust-cache@v2

      - id: check
        run: |
          chmod +x ./scripts/is_version_already_uploaded.sh
          chmod +x ./scripts/get_current_version.sh
          set +e
          ./scripts/is_version_already_uploaded.sh $PACKAGE_NAME
          export EXIT_CODE="$?"
          set -e
          if [[ "$EXIT_CODE" == "7" ]]; then
            echo '::set-output name=is_new_version::no'
          elif [[ "$EXIT_CODE" == "0" ]]; then
            echo '::set-output name=is_new_version::yes'
          else
            # Unexpected outcome, indicates a bug.
            exit "$EXIT_CODE"
          fi
      - name: Determine the tag name
        id: tag
        run: |
          export TAG_NAME="v$(./scripts/get_current_version.sh $PACKAGE_NAME)"
          echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT

  pre-publish-checks:
    name: Check for semver compliance
    runs-on: ubuntu-latest
    needs:
      - ci-everything
      - should-publish
    if: needs.should-publish.outputs.is_new_version == 'yes'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Check semver
        run: |
          chmod +x find_comparison_version.sh
          cargo install cargo-semver-checks
          export COMPARE_TO_VERSION="$(./find_comparison_version.sh $PACKAGE_NAME)"
          cargo semver-checks --compare-to "$COMPARE_TO_VERSION"
